/*
 * This file is generated by jOOQ.
 */
package com.michal.jooq.`public`.tables.records


import java.time.LocalDate
import java.util.UUID

import org.jooq.JSONB
import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class EventStoreRecord() : UpdatableRecordImpl<EventStoreRecord>(com.michal.jooq.`public`.tables.EventStore.EVENT_STORE) {

    open var id: UUID?
        set(value): Unit = set(0, value)
        get(): UUID? = get(0) as UUID?

    open var streamId: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var payload: JSONB?
        set(value): Unit = set(2, value)
        get(): JSONB? = get(2) as JSONB?

    open var metadata: JSONB?
        set(value): Unit = set(3, value)
        get(): JSONB? = get(3) as JSONB?

    open var version: Int?
        set(value): Unit = set(4, value)
        get(): Int? = get(4) as Int?

    open var created: LocalDate?
        set(value): Unit = set(5, value)
        get(): LocalDate? = get(5) as LocalDate?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<UUID?> = super.key() as Record1<UUID?>

    /**
     * Create a detached, initialised EventStoreRecord
     */
    constructor(id: UUID? = null, streamId: String? = null, payload: JSONB? = null, metadata: JSONB? = null, version: Int? = null, created: LocalDate? = null): this() {
        this.id = id
        this.streamId = streamId
        this.payload = payload
        this.metadata = metadata
        this.version = version
        this.created = created
        resetTouchedOnNotNull()
    }
}
